#!/usr/bin/env perl

=head1 OVERVIEW

git-branch-summary - Lists branches while sorting them

=cut

use feature ':5.14';
use strict;
use warnings 'all';
$^W = 1;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

my $upstream = "origin/HEAD";
my $upstream_cache = {};
my $help;
my $verbose;
my $cherry;

GetOptions(
  "cherry" => \$cherry,
  "upstream|u=s" => \$upstream,
  "help|?" => \$help,
  "verbose|v" => \$verbose,
) or pod2usage(2);
pod2usage(1) if $help;

$upstream = git_rev_parse($upstream);

# Cache the upstream revs
{
  open my $fh, '-|', qw(git rev-list), $upstream;

  my $count = 0;
  while (my $line = <$fh>) {
    chomp $line;
    $upstream_cache->{$line} = $count;
    $count++;
  }
}

open my $fh, '-|', qw(git for-each-ref refs/heads/);

my @branches;
my $longest_name = 0;
while (my $line = <$fh>) {
  chomp $line;
  my ($sha, $type, $name) = split(/\s+/, $line, 3);
  next unless $type eq 'commit';
  $name =~ s{^refs/heads/}{};
  my $branch_info = {
    sha => $sha,
    name => $name,
  };
  $longest_name = length($name) if length($name) > $longest_name;

  my ($merge_base, $ahead) = git_merge_base($branch_info->{name});
  next unless $merge_base;

  if ($ahead == 0) {
    push @branches, $branch_info->{name};
    next;
  }

  if ($cherry) {
    open my $fh, "-|", qw(git cherry), $upstream, $branch_info->{sha};
    my $all_merged = 1;
    while (my $cherry = <$fh>) {
      if ($cherry !~ /^- /) {
        $all_merged = 0;
        last;
      }
    }
    close $fh;
    if ($all_merged) {
      push @branches, $branch_info->{name};
      next;
    }
  }
}

say for sort @branches;

exit(0);

sub git_rev_parse {
  my ($upstream) = @_;

  open my $fh, "-|", qw(git rev-parse), $upstream;
  my $line = <$fh>;
  chomp $line;

  $line;
}

sub git_merge_base {
  my ($branch) = @_;

  open my $fh, "-|", qw(git rev-list), $branch;
  my $count = 0;
  my $sha;
  while ($sha = <$fh>) {
    chomp $sha;
    last if exists $upstream_cache->{$sha};
    $count++;
  }
  warn "$branch doesn't share history with upstream" unless $sha;
  return ($sha, $count);
}
