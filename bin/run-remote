#!/bin/bash

# Failed commands aborts script
set -e
# Uninitialized expansion aborts script
set -u
# Any command in a pipe failing aborts script
set -o pipefail

DEFAULT_HOST="sandbox"
DEFAULT_DIRECTORY="~/"
DEFAULT_SHELL="/bin/bash"

function print_usage {
    echo "Usage: $0 [options]" >&2
    echo "Options:" >&2
    echo "  -h           this help" >&2
    echo "  -c host      the host ($DEFAULT_HOST)" >&2
    echo "  -d directory the directory to run from ($DEFAULT_DIRECTORY)" >&2
    echo "  -s shell     the remote shell ($DEFAULT_SHELL)" >&2
    echo "  -l           use a login shell" >&2
    exit 1
}

# This function shell-quotes the argument
function quote {
    local quoted=${1//\'/\'\\\'\'}
    local finechars=${1//[\/a-zA-Z0-9_,=.-]/}
    if [ -n "$1" ] && [ -z "$finechars" ]; then
        printf "%s" "$1"
    else
        printf "'%s'" "$quoted"
    fi
}
# Prints out the command as it is running
function runverbose {
    typeset -a args
    for a in "$@"; do
        args+=("`quote "$a"`")
    done
    echo "RUNNING:" "${args[@]}" >&2
    "$@"
}

while getopts ":hc:d:s:lv" opt; do
    case $opt in
        c)
            host="$OPTARG"
            ;;
        h)
            print_usage
            ;;
        d)
            dir="$OPTARG"
            ;;
        s)
            shell="$OPTARG"
            ;;
        v)
            verbose=1
            ;;
        l)
            login=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            print_usage
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            print_usage
            ;;
    esac
done
shift $((OPTIND-1))
host="${host:-$DEFAULT_HOST}"
dir="${dir:-$DEFAULT_DIRECTORY}"
shell="${shell:-$DEFAULT_SHELL}"
verbose="${verbose:-0}"

cmd=("$shell")
if [ "${login:-}" = 1 ]; then
    cmd+=(-l)
fi
cmd+=(-c)
cmdstring=()
for a in "$@"; do
    cmdstring+=("`quote "$a"`")
done
cmdstring="${cmdstring[*]}"

cmdstring="cd $dir && eval $cmdstring"

if [ "$verbose" = 1 ]; then
    runverbose ssh -q -t "$host" "${cmd[@]}" "`quote "$cmdstring"`"
else
    ssh -q -t "$host" "${cmd[@]}" "`quote "$cmdstring"`"
fi
