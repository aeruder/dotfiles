" File mappings

" runtime submodules/vim-pathogen.tpope.github.com/autoload/pathogen.vim
" if has('vim_starting')
"     let config=pathogen#split(&runtimepath)[0]
"     execute pathogen#infect('submodules/{}')
"     call dirsettings#Install()
" endif
if has("win32")
    let s:sep="\\"
else
    let s:sep="/"
endif

let &directory=expand("<sfile>:p:h:h").s:sep."swp"
let &undodir=expand("<sfile>:p:h:h").s:sep."undo"


if len($PYTHONPATH) > 0
    let $PYTHONPATH=expand("<sfile>:p:h:h").s:sep."python-client:".$PYTHONPATH
else
    let $PYTHONPATH=expand("<sfile>:p:h:h").s:sep."python-client"
endif

if has("win32")
    let $PATH=$PATH.";".expand("<sfile>:p:h:h").s:sep."bin"
endif

" Install plugins with plug
runtime vim-plug/plug.vim

call plug#begin(expand("<sfile>:p:h:h").s:sep."plugged")

" My favorite color scheme
Plug 'https://github.com/nanotech/jellybeans.vim'

Plug 'https://github.com/altercation/vim-colors-solarized'

" UNIX helpers (rename file, sudo write file, so on)
Plug 'https://github.com/tpope/vim-eunuch'

" Best git plugin...ever?
Plug 'https://github.com/tpope/vim-fugitive'

" Bunch of extensions to allow surrounding text objects
Plug 'https://github.com/tpope/vim-surround'

" Lots of plugins use this to be able to hook into
" being able to repeat with the . operator
Plug 'https://github.com/tpope/vim-repeat'

" Makes increment/decrement work on dates, etc..
Plug 'https://github.com/tpope/vim-speeddating'

" Case insensitive search/replace (:S)
Plug 'https://github.com/tpope/vim-abolish'

" Comment/uncommenting
Plug 'https://github.com/tpope/vim-commentary'

" Lots of bracket maps for going to next file, next buffer
" and so on.
Plug 'https://github.com/tpope/vim-unimpaired'

" File/buffer explorer, FAST!
Plug 'https://github.com/kien/ctrlp.vim'

" Wrapper around AG for super-fast grep
Plug 'https://github.com/Numkil/ag.vim'

" Nerdtree, a little bit better file explorer
Plug 'https://github.com/scrooloose/nerdtree'

" Tabular, line up text
Plug 'https://github.com/godlygeek/tabular'

" Ultisnips - snippet support
Plug 'https://github.com/SirVer/ultisnips'

" Undotree, browse vim's infinite undo
Plug 'https://github.com/mbbill/undotree'

" Better status line
Plug 'https://github.com/bling/vim-airline'

" Read/write to gpg encrypted files
Plug 'https://github.com/jamessan/vim-gnupg'

" Quickly make functions from prototypes in matching .h file
Plug 'https://github.com/derekwyatt/vim-protodef'

" Mark adds/subtracts/etc.. from git-tracked files
Plug 'https://github.com/mhinz/vim-signify'

" some vim snippets
Plug 'https://github.com/honza/vim-snippets'

" easymotion, let's you jump to spots on the screen super fast
Plug 'https://github.com/Lokaltog/vim-easymotion'

" GNU global
Plug 'https://github.com/vim-scripts/gtags.vim'

" Deoplete
Plug 'https://github.com/Shougo/deoplete.nvim'

" neco-vim
Plug 'https://github.com/Shougo/neco-vim'

call plug#end()

""""""""""""""""""""""""
" Turn off fuf data file
let g:fuf_dataDir = ''

""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""
" Lots and lots of settings
""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""

if !has("nvim")
    set nocompatible
    set ttyfast
endif
syntax on

""""""""""""""""""""""""
" Color scheme
if has ("gui") && &guifont == ""
    set guifontset=
    if has("gui_win32")
        set guifont=Anka/Coder:h12,Terminus:h12,Inconsolata:h12,ProFont:h12,Terminal:h12
    else
        set guifont=Anka/Coder\ 12,Terminus\ 12,Inconsolata\ 12,ProFont\ 12,Bitstream\ Vera\ Sans\ Mono\ 12,Terminal\ 12,Monospace\ 12
    endif
endif

if $TERM == "linux"
    set background=dark
    colors elflord
elseif has("win32") && !has("gui")
    set background=dark
    colors elflord
elseif has("gui")
    set background=light
    colors solarized
else
    if $COLORTERM == "gnome-terminal" || $KONSOLE_PROFILE_NAME != ""
        set t_Co=256
    endif
    if $TERM == "screen"
      set t_Co=256
    endif
    if $SOLARIZED_THEME == "1"
        set background=dark
        colors solarized
    else
        set background=dark
        colors jellybeans
    endif
endif
com! -nargs=0 Solarized
            \ set background=light |
            \ colors solarized

""""""""""""""""""""""""
" Use with :Usespaces <num> and we
" are configured with indentation of <num>
" using spaces.
com! -nargs=1 Usespaces
            \ setlocal tabstop=<args> |
            \ setlocal expandtab |
            \ setlocal shiftwidth=<args> |
            \ setlocal softtabstop=<args> |
            \ setlocal nocopyindent

""""""""""""""""""""""""
" Use with :Usetabs <num> and we are
" configured with indentation of <num> using
" tabs.
com! -nargs=1 Usetabs
            \ setlocal tabstop=<args> |
            \ setlocal noexpandtab |
            \ setlocal shiftwidth=<args> |
            \ setlocal softtabstop=<args> |
            \ setlocal copyindent

""""""""""""""""""""""""
" GNU indentation style is a mess
com! -nargs=0 Gnuindent
            \ setlocal tabstop=8 |
            \ setlocal shiftwidth=2 |
            \ setlocal softtabstop=2 |
            \ setlocal noexpandtab |
            \ setlocal nocopyindent

" default indentation settings
set tabstop=4
set expandtab
set shiftwidth=4
set softtabstop=4
set nocopyindent

""""""""""""""""""""""""
" If we use special characters, ensure we are doing so with
" utf-8
set encoding=utf-8

""""""""""""""""""""""""
" Line wrap settings
set nowrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=

""""""""""""""""""""""""
" Default split directions
set splitbelow
set splitright

""""""""""""""""""""""""
" Give us some context around the cursor when scrolling
set sidescroll=10 sidescrolloff=10
set scrolloff=4

""""""""""""""""""""""""
" Set how we indent new lines, autoindent seems most
" sane to me (except when filetype indent is available)
set nosmartindent
set nocindent
set autoindent
set shiftround
filetype plugin indent on

""""""""""""""""""""""""
" Set up our status bar with lots of good information
set showmode
set showcmd
set ruler

""""""""""""""""""""""""
" Make our backspace sane (we want to be able to backspace over everything)
set backspace=indent,eol,start

""""""""""""""""""""""""
" Tab completion in command mode
set wildmenu
set wildmode=list:longest

""""""""""""""""""""""""
" When beeping, do it visually not audibly (which half the time
" doesn't work anyway)
set visualbell t_vb=

""""""""""""""""""""""""
" Highlight the entire line we are on
set cursorline

""""""""""""""""""""""""
" Always enable the status line for the window, even if there is just
" one window.
set laststatus=2

""""""""""""""""""""""""
" Display the line numbers relative to the current line
set relativenumber
set number

""""""""""""""""""""""""
" Persistent undo even if we quit vim.
set undofile

""""""""""""""""""""""""
" Search settings
" If we search for Abc, it is case-sensitive, abc is case-insensitive
set ignorecase
set smartcase
" Search as we type
set incsearch
" Highlight our searches
set hlsearch
" Wrap at the end
set nowrapscan

""""""""""""""""""""""""
" When we type a bracket, quickly jump to the matching bracket
set showmatch

""""""""""""""""""""""""
" CScope settings
set cscopequickfix=s-,c-,d-,i-,t-,e-,g-
set cscopetag

""""""""""""""""""""""""
" Allow us to switch away from an unsaved buffer
set hidden

""""""""""""""""""""""""
" When we yank text into the unnamed register, automatically put
" it on the clipboard.
" set clipboard=unnamed

""""""""""""""""""""""""
" When doing folds, base it on the syntax
set foldmethod=syntax
set foldnestmax=2

""""""""""""""""""""""""
" When using vimdiff, ignore white-space changes
" set diffopt=iwhite,filler
set diffopt=filler

""""""""""""""""""""""""
" Show tabs, trailing spaces, etc..
set list listchars=tab:»·,trail:·,extends:>,precedes:<






""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""
" Key bindings
""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""

" Change our leader key to , rather than \
let mapleader = ","

" Align comma'd lists like
"
" a, b, c, d
" foo, bar, blah, baz
"
" to this when selected and ran through this command:
"
" a,   b,   c,    d
" foo, bar, blah, baz
"
vnoremap <leader>A, :Tab /[;,]<CR>gv:s/\v(\s+)([,;])\s?/\2\1/g<CR>gv:s/\v\s+$//<CR>:let @/=""<CR>

" Helps debug making syntax files, displays the syntax of the
" character underneath the cursor.
nnoremap <leader>S :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Clear the highlighted search
nnoremap <leader><space> :nohlsearch<CR>
nnoremap <leader>D :%s/<C-R>///g<CR>
nnoremap <leader>gD :%g/<C-R>//d<CR>
nnoremap <leader>g!D :%g!/<C-R>//d<CR>
vnoremap <leader>D :s/<C-R>///g<CR>
vnoremap <leader>gD :g/<C-R>//d<CR>
vnoremap <leader>g!D :g!/<C-R>//d<CR>

" Highlight spacing errors
nnoremap <leader>f<space> /\v(\s+$)\|(<space>\ze<tab>)<CR>

" Highlight tabs
nnoremap <leader>f<Tab> /<Tab><CR>

" Highlight just pasted text
nnoremap <leader>v V`]

" Highlight the current word
nnoremap <leader>yiw yiw:set hlsearch<Cr>:let @/="\\V\\<" . escape(@", "\\") . "\\>"<Cr>

" Highlight the current line
nnoremap <leader>yy ^y$:set hlsearch<Cr>:let @/="\\V\\^" . escape(@", "\\") . "\\$"<Cr>

" Open vimrc
nnoremap <leader>ev <C-w>v<C-w>l:e $MYVIMRC<Cr>

" Open vertical split and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" Open undotree
nnoremap <leader>ut :UndotreeToggle<Cr>

" Make j and k go through wrapped lines
nnoremap j gj
nnoremap k gk

" Let us use ; instead of : for command mode
nnoremap ; :

" Use 'jk' instead of ESC
inoremap jk <ESC>

" Toggle in and out of hex dump mode
nnoremap <leader>h :Hexmode<Cr>

" Open a scratch buffer
nnoremap <leader>es <C-w>v<C-w>l:Scratch<Cr>

" grep utilities
nnoremap <leader>fa yiw:Ag <C-R>"
nnoremap <leader>fg yiw:Ggrep <C-R>"
nnoremap <leader>fb yiw:Bgrep <C-R>"

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " => CtrlP
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Buffer list
nnoremap <leader>bb :CtrlPBuffer<Cr>

" Most-recently-used ctrlp files
nnoremap <leader>br :CtrlPMRU<Cr>

" Find qt headers
if isdirectory("/usr/local/qt")
    nnoremap <leader>bq :CtrlP /usr/include/qt<Cr>
elseif isdirectory("/usr/include/qt4")
    nnoremap <leader>bq :CtrlP /usr/include/qt4<Cr>
endif

" Search for files in current directory of current file
nnoremap <leader>bc :execute "CtrlP " . fnameescape(fnamemodify(expand("%"), ":p:h"))<Cr>

" Search for files in parent directory of current file
nnoremap <leader>bp :execute "CtrlP " . fnameescape(fnamemodify(expand("%"), ":p:h:h"))<Cr>

" Normal CtrlP
nnoremap <leader>bf :<c-u>CtrlP<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  ultisnips                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger = ",ue"
let g:UltiSnipsJumpForwardTrigger = ",un"
let g:UltiSnipsJumpBackwardTrigger = ",up"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                youcompleteme                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_global_ycm_extra_conf = expand("<sfile>:p:h").s:sep."ycm_extra_conf.py"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                    gtags                                    "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>gt :<c-u>Gtags<Cr>
nmap <leader>gr :<c-u>Gtags -r<Cr>

let g:Gtags_OpenQuickfixWindow = 0
let g:Gtags_VerticalWindow = 0
let Gtags_Auto_Map = 0


""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""
" Our active abbreviations
""""""""""""""""""""""""
"""""""""""""""""""""""
""""""""""""""""""""""""
abbreviate teh the
abbreviate sl std_logic
abbreviate slv std_logic_vector

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 easymotion                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:EasyMotion_do_mapping = 0
map <Space> <Plug>(easymotion-s)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  deoplete                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:deoplete#enable_at_startup = 1

""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""
" Misc custom commands, etc.
""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""

" This makes % work for a lot more than just
" {(<, it also works on html, etc..
runtime macros/matchit.vim

" This makes :Man open manpages in a split with syntax highlighting
runtime ftplugin/man.vim

" Some filesystems that are mounted in /tmp (particularly on OS X), cause
" problems with backup files
augroup customchanges
    au!
    autocmd BufRead /tmp/*
        \ setlocal nobackup |
        \ setlocal nowritebackup

    " Some custom filetypes
    au BufNewFile,BufRead build_log.txt     setf changelog
    au BufNewFile,BufRead *.phys            setf cmphys
    au BufNewFile,BufRead *.vb              set ft=vbnet
    au BufNewFile,BufRead *.il              set ft=ilasm
    au BufNewFile,BufRead *.adoc            set ft=asciidoc

    " Space/tab settings for different filetypes
    au FileType make
        \ Usetabs 8

    au FileType gitcommit
        \ set tw=72

    au FileType ruby
        \ Usespaces 2

    au FileType haml
        \ Usespaces 2
augroup END

" This is used when editing a mutt mail message
comm! -nargs=0 BeginMailMessage call BeginMailMessage()
function! BeginMailMessage()
    set tw=72
    set wrap
    set expandtab
    set ft=mail
    silent! g/^Message-Id: <.*@.*>/d
    silent! %s/^My-\(Message-Id: <.*@.*>\)$/\1/
    normal 1G
endfunction

" Hex editing support (from http://vim.wikia.com/wiki/Improved_hex_editing)
comm! -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function! ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

" Pull in our zsh special directories
function! PullInZshNamedDirectories()
    if (exists("$HOME"))
        let l:namedirs = $HOME . "/.znameddirs"
        if (filereadable(l:namedirs))
            let l:lines = readfile(l:namedirs)
            for l:a in l:lines
                let l:splitdir = split(l:a, " ")
                if (len(l:splitdir) == 2 && match(l:splitdir[0], '[^a-z0-9_A-Z]') == -1)
                    exec "let $" . l:splitdir[0] . " = '" . fnameescape(l:splitdir[1]) ."'"
                endif
            endfor
        endif
    endif
endfunction

call PullInZshNamedDirectories()
