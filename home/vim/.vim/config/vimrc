" So much of this is stolen from rafi/config
if &compatible
  set nocompatible
endif

let g:vim_configdir=resolve(expand("<sfile>:p:h"))
let g:vim_maindir=resolve(fnamemodify(g:vim_configdir, ':h'))

execute "source" g:vim_configdir."/pathhelper.vim"

function! s:source_file(path, ...) abort "{{{
  let use_global = get(a:000, 0, ! has('vim_starting'))
  let abspath = PJ(g:vim_configdir, a:path)
  if ! use_global
    execute 'source' fnameescape(abspath)
    return
  endif

  let content = map(readfile(abspath),
    \ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute printf('source %s', fnameescape(tempfile))
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction "}}}

function! s:startup_file(path)
  call s:source_file(a:path, 0)
endfunction

call s:startup_file('startup.paths.vim')

let g:dein#install_max_processes = 16
let g:dein#install_progress_type = 'echo'
let g:dein#enable_notification = 0
let g:dein#install_log_filename = PJ(g:vim_cachedir, "dein.log")

" Configure our vimrc_profile level
"  -1 means low version of vim (<= 7.3)
"  0 means we are on ssh or a slow machine (no autocomplete, etc.)
"  1 means everything
"  2 means we have admin-control and can install a bunch of helpers and stuff
"    (clang autocomplete, and so on).
if !exists('g:vimrc_profile')
  if has('nvim')
    let g:vimrc_profile = 2
  elseif v:version >= 740
    let g:vimrc_profile = 1
  else
    let g:vimrc_profile = -1
  endif
  if !has('nvim') && !has('python3')
    let g:vimrc_profile = -1
  " elseif len($SSH_CLIENT) && g:vimrc_profile > 0
  "   let g:vimrc_profile = 0
  endif
endif

call s:startup_file('startup.init.vim')
if has('nvim')
  call s:startup_file('startup.neovim.vim')
endif

function! s:dein_check_ruby() abort
  call system("ruby -e 'require \"json\"; require \"yaml\"'")
  return (v:shell_error == 0) ? 1 : 0
endfunction

function! s:dein_check_yaml2json()
  try
    let result = system("yaml2json", "---\ntest: 1")
    if v:shell_error != 0
      return 0
    endif
    let result = json_decode(result)
    return result.test
  catch
  endtry
  return 0
endfunction

function! s:dein_load_yaml(filename) abort
  if executable('yaml2json') && exists('*json_decode') &&
        \ s:dein_check_yaml2json()
    " Decode YAML using the CLI tool yaml2json
    " See: https://github.com/koraa/large-yaml2json-json2yaml
    let g:denite_plugins = json_decode(
          \ system('yaml2json', readfile(a:filename)))
  elseif executable('ruby') && exists('*json_decode') && s:dein_check_ruby()
    let g:denite_plugins = json_decode(
          \ system("ruby -e 'require \"json\"; require \"yaml\"; ".
                  \ "print JSON.generate YAML.load \$stdin.read'",
                  \ readfile(a:filename)))
  else
    " Fallback to use python3 and PyYAML
  python3 << endpython
import vim, yaml
with open(vim.eval('a:filename'), 'r') as f:
  vim.vars['denite_plugins'] = yaml.load(f.read())
endpython
  endif

  for plugin in g:denite_plugins
    call dein#add(plugin['repo'], extend(plugin, {}, 'keep'))
  endfor
  unlet g:denite_plugins
endfunction

function! s:source_file(path, ...) abort
  let use_global = get(a:000, 0, ! has('vim_starting'))
  let abspath = resolve(PJ(g:vim_configdir, a:path))
  if ! use_global
    execute 'source' fnameescape(abspath)
    return
  endif

  let content = map(readfile(abspath),
    \ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute printf('source %s', fnameescape(tempfile))
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction

" Set augroup
augroup MyAutoCmd
  autocmd!
  autocmd BufEnter * syntax sync fromstart
augroup END

" Initialize dein.vim (package manager)
let s:path = PJ(g:vim_cachedir, "dein")
let s:plugins_path = PJ(g:vim_configdir, "plugins.yaml")
if g:vimrc_profile >= 0 && dein#load_state(s:path)
  call dein#begin(s:path, [expand('<sfile>'), s:plugins_path])
  try
    call s:dein_load_yaml(s:plugins_path)
  catch /.*/
    echoerr v:exception
    echomsg 'Error loading config/plugins.yaml...'
    echomsg 'Caught: ' v:exception
    echoerr 'Please run: pip install --user PyYAML'
  endtry

  if isdirectory(PJ(g:vim_maindir, "dev"))
    call dein#local(PJ(g:vim_maindir, "dev"), {'frozen': 1, 'merged': 0})
  endif
  call dein#end()
  call dein#save_state()
  if dein#check_install()
    if ! has('nvim')
      set nomore
    endif
    call dein#install()
  endif
endif

" Initialize dein.vim (package manager)
let s:path = PJ(g:vim_cachedir, "dein")
let s:plugins_path = PJ(g:vim_configdir, "plugins.yaml")
let s:devpath = PJ(g:vim_maindir, "dev")
if g:vimrc_profile >= 0 && dein#load_state(s:path)
  call dein#begin(s:path, [expand('<sfile>'), s:plugins_path])
  try
    call s:dein_load_yaml(s:plugins_path)
  catch /.*/
    echoerr v:exception
    echomsg 'Error loading config/plugins.yaml...'
    echomsg 'Caught: ' v:exception
    echoerr 'Please run: pip3 install --user PyYAML'
  endtry

  if isdirectory(s:devpath)
    call dein#local(s:path, {'frozen': 1, 'merged': 0})
  endif
  call dein#end()
  call dein#save_state()
  if dein#check_install()
    if ! has('nvim')
      set nomore
    endif
    call dein#install()
  endif
endif

filetype plugin indent on
syntax enable

if g:vimrc_profile >= 0 && has('vim_starting')
  call dein#call_hook('source')
  autocmd VimEnter * call dein#call_hook('post_source')
elseif g:vimrc_profile >= 0 && ! has('vim_starting')
  call dein#call_hook('source')
  call dein#call_hook('post_source')
endif

" Loading configuration modules {{{
call s:source_file('neovim.vim')
call s:source_file('theme.vim')
call s:source_file('general.vim')
call s:source_file('indent.vim')
call s:source_file('terminal.vim')
call s:source_file('filetype.vim')
call s:source_file('mappings.vim')
call s:source_file('whitespace.vim')
call s:source_file('unused.vim')
call s:source_file('perldoc.vim')
call s:source_file('scratchfiles.vim')
" }}}

set secure
