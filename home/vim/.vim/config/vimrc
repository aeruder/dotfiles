" File mappings

let s:maindir=expand("<sfile>:p:h:h")

if has("win32")
  let s:sep="\\"
else
  let s:sep="/"
endif

if has('nvim')
  if len($PYTHONPATH) > 0
    let $PYTHONPATH=expand("<sfile>:p:h:h").s:sep."python-client:".$PYTHONPATH
  else
    let $PYTHONPATH=expand("<sfile>:p:h:h").s:sep."python-client"
  endif
endif

silent! runtime submodules/vim-pathogen.tpope.github.com/autoload/pathogen.vim
if has('vim_starting') && exists("*pathogen#split")
  let config=pathogen#split(&runtimepath)[0]
  execute pathogen#infect('submodules/{}')
endif
silent! runtime autoload/plug.vim

if !exists("*pathogen#split") || !exists("*plug#begin")
  let g:vimrc_profile = "dead"
endif

if !exists("g:vimrc_profile")
  if has('nvim') || v:version >= 800
    let g:vimrc_profile = "full"
  elseif v:version >= 730
    let g:vimrc_profile = "medium"
  else
    let g:vimrc_profile = "bare"
  endif
endif

if g:vimrc_profile == "dead"
  let g:vimrc_profile = -1
elseif g:vimrc_profile == "bare"
  let g:vimrc_profile = 0
elseif g:vimrc_profile == "full"
  let g:vimrc_profile = 100
elseif g:vimrc_profile == "medium"
  let g:vimrc_profile = 1
elseif v:version < 800 ||
      type(g:vimrc_profile) != v:t_number
  let g:vimrc_profile = 0
endif

if g:vimrc_profile >= 0
  let g:plug_shallow = 0
  call plug#begin(s:maindir.s:sep."plugged")

  " bare and above
  Plug 'morhetz/gruvbox'

  " medium and above
  if g:vimrc_profile >= 1
    Plug 'mtth/scratch.vim'
    Plug 'godlygeek/tabular'
    Plug 'tpope/vim-abolish'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-git'
    Plug 'tpope/vim-projectionist'
    Plug 'dbakker/vim-projectroot'
    Plug 'tpope/vim-repeat'
    Plug 'mhinz/vim-signify'
    Plug 'tpope/vim-speeddating'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-unimpaired'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-perl/vim-perl', { 'for': 'perl', 'do': 'make clean carp dancer highlight-all-pragmas moose test-more try-tiny' }
    Plug 'vim-ruby/vim-ruby'
    Plug 'xolox/vim-misc'
    Plug 'xolox/vim-notes'
    Plug 'aeruder/vim-showmap'
  endif

  " full
  if g:vimrc_profile >= 2
    Plug 'tpope/vim-rails'
    Plug 'mbbill/undotree'
    Plug 'mhinz/vim-grepper'
    Plug 'tpope/vim-markdown'
    if has("python3")
      Plug 'honza/vim-snippets'
      Plug 'SirVer/ultisnips'
      Plug 'Shougo/denite.nvim'
      Plug 'Shougo/neomru.vim'
    end
    if has("nvim")
      Plug 'Shougo/deoplete.nvim'
    elseif has("lua")
      Plug 'Shougo/neocomplete.vim'
    end
  endif

  call plug#end()
endif

let s:mainconfig=expand("<sfile>")
let &directory=expand("<sfile>:p:h:h").s:sep."swp"
let &undodir=expand("<sfile>:p:h:h").s:sep."undo"

if has("win32")
    let $PATH=$PATH.";".expand("<sfile>:p:h:h").s:sep."bin"
endif

""""""""""""""""""""""""
" Turn off fuf data file
let g:fuf_dataDir = ''

""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""
" Lots and lots of settings
""""""""""""""""""""""""
""""""""""""""""""""""""
""""""""""""""""""""""""

if !has("nvim")
    set nocompatible
    set ttyfast
endif
syntax on

""""""""""""""""""""""""
" Color scheme
augroup colorscheme
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
    autocmd ColorScheme * match ExtraWhitespace /\(\s\+$\)\|\(\($\n\s*\)\+\%$\)/
    autocmd BufWinEnter * match ExtraWhitespace /\(\s\+$\)\|\(\($\n\s*\)\+\%$\)/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    autocmd InsertLeave * match ExtraWhitespace /\(\s\+$\)\|\(\($\n\s*\)\+\%$\)/
    autocmd BufWinLeave * call clearmatches()
augroup END

if has ("gui") && &guifont == ""
    set guifontset=
    if has("gui_win32")
        set guifont=Anka/Coder:h12,Terminus:h12,Inconsolata:h12,ProFont:h12,Terminal:h12
    else
        set guifont=Anka/Coder\ 12,Terminus\ 12,Inconsolata\ 12,ProFont\ 12,Bitstream\ Vera\ Sans\ Mono\ 12,Terminal\ 12,Monospace\ 12
    endif
endif

if $TERM == "linux"
    set background=dark
    colors elflord
elseif has("win32") && !has("gui")
    set background=dark
    colors elflord
elseif has("gui")
    set background=dark
    colors elflord
    silent! colors gruvbox
else
    set t_Co=256
    set background=dark
    colors elflord
    silent! colors gruvbox
endif
com! -nargs=0 Solarized
            \ set background=light |
            \ colors solarized

""""""""""""""""""""""""
" Use with :Usespaces <num> and we
" are configured with indentation of <num>
" using spaces.
com! -nargs=1 Usespaces
            \ setlocal tabstop=<args> |
            \ setlocal expandtab |
            \ setlocal shiftwidth=<args> |
            \ setlocal softtabstop=<args> |
            \ setlocal nocopyindent

""""""""""""""""""""""""
" Use with :Usetabs <num> and we are
" configured with indentation of <num> using
" tabs.
com! -nargs=1 Usetabs
            \ setlocal tabstop=<args> |
            \ setlocal noexpandtab |
            \ setlocal shiftwidth=<args> |
            \ setlocal softtabstop=<args> |
            \ setlocal copyindent

""""""""""""""""""""""""
" GNU indentation style is a mess
com! -nargs=0 Gnuindent
            \ setlocal tabstop=8 |
            \ setlocal shiftwidth=2 |
            \ setlocal softtabstop=2 |
            \ setlocal noexpandtab |
            \ setlocal nocopyindent

if has('vim_starting')
  " default indentation settings
  set tabstop=4
  set expandtab
  set shiftwidth=4
  set softtabstop=4
  set nocopyindent
endif

""""""""""""""""""""""""
" If we use special characters, ensure we are doing so with
" utf-8
set encoding=utf-8

""""""""""""""""""""""""
" Line wrap settings
set nowrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=

""""""""""""""""""""""""
" Default split directions
set splitbelow
set splitright

""""""""""""""""""""""""
" Give us some context around the cursor when scrolling
set sidescroll=10 sidescrolloff=10
set scrolloff=4

""""""""""""""""""""""""
" Set how we indent new lines, autoindent seems most
" sane to me (except when filetype indent is available)
set nosmartindent
set nocindent
set autoindent
set shiftround
filetype plugin indent on

""""""""""""""""""""""""
" Set up our status bar with lots of good information
set showmode
set showcmd
set ruler

""""""""""""""""""""""""
" Make our backspace sane (we want to be able to backspace over everything)
set backspace=indent,eol,start

""""""""""""""""""""""""
" Tab completion in command mode
set wildmenu
set wildmode=list:longest
set wildignore=*.o,*.obj,*.d,*.P,GTAGS,GPATH,GRTAGS

""""""""""""""""""""""""
" When beeping, do it visually not audibly (which half the time
" doesn't work anyway)
set visualbell t_vb=

""""""""""""""""""""""""
" Highlight the entire line we are on
set cursorline

""""""""""""""""""""""""
" Always enable the status line for the window, even if there is just
" one window.
set laststatus=2

""""""""""""""""""""""""
" Display the line numbers relative to the current line
set relativenumber
set number

""""""""""""""""""""""""
" Persistent undo even if we quit vim.
set undofile

""""""""""""""""""""""""
" Search settings
" If we search for Abc, it is case-sensitive, abc is case-insensitive
set ignorecase
set smartcase
" Search as we type
set incsearch
" Highlight our searches
set hlsearch
" Wrap at the end
set nowrapscan

""""""""""""""""""""""""
" When we type a bracket, quickly jump to the matching bracket
" set showmatch

""""""""""""""""""""""""
" CScope settings
set cscopequickfix=s-,c-,d-,i-,t-,e-,g-
set cscopetag

""""""""""""""""""""""""
" Allow us to switch away from an unsaved buffer
set hidden

""""""""""""""""""""""""
" When we yank text into the unnamed register, automatically put
" it on the clipboard.
" set clipboard=unnamed

""""""""""""""""""""""""
" When doing folds, base it on the syntax
set foldmethod=syntax
set foldnestmax=2
set foldlevelstart=1

""""""""""""""""""""""""
" When using vimdiff, ignore white-space changes
" set diffopt=iwhite,filler
set diffopt=filler

""""""""""""""""""""""""
" Show tabs, trailing spaces, etc..
set list listchars=tab:»·,trail:·,extends:>,precedes:<
let &colorcolumn="80,".join(range(120,999),",")

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              regular mappings                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make j and k go through wrapped lines
nnoremap j gj
nnoremap k gk

" Use 'jk' instead of ESC
inoremap jk <ESC>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                             hierarchy mappings                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let s:mapleaders = []

function! s:push_leader(app)
  if len(s:mapleaders) == 0
    call add(s:mapleaders, a:app)
  else
    call add(s:mapleaders, s:mapleaders[-1].a:app)
  endif
  let g:mapleader = s:mapleaders[-1]
  let l:indentstr = repeat("\\ ", 2*(len(s:mapleaders)-1))
  if empty(l:indentstr)
    execute "nnoremap <leader>? :n +/^".l:indentstr."call\\ s:push_leader ".s:mainconfig."<Cr>"
  else
    execute "nnoremap <leader>? :n +/^".l:indentstr."call\\ s:push_leader(\"".a:app."\") ".s:mainconfig."<Cr>"
  endif
endfunction

function! s:pop_leader()
  call remove(s:mapleaders, -1)
  if len(s:mapleaders) == 0
    unlet g:mapleader
  else
    let g:mapleader = s:mapleaders[-1]
  end
endfunction

call s:push_leader("\<Space>")
  nnoremap <silent> <SID>(MyYankOperator) :set opfunc=MyYankOperator<cr>g@
  xnoremap <silent> <SID>(MyYankOperator) :<c-u>call MyYankOperator(visualmode())<cr>
  nmap <leader>y <SID>(MyYankOperator)
  xmap <leader>y <SID>(MyYankOperator)

  " WINDOW STUFF
  call s:push_leader("w")
    " window movement
    nnoremap <leader>h     <C-w>h
    nnoremap <leader>j     <C-w>j
    nnoremap <leader>k     <C-w>k
    nnoremap <leader>l     <C-w>l
    nnoremap <leader>d     <C-w>c
    nnoremap <leader>=     <C-w>=
    nnoremap <leader>-     <C-w>s
    nnoremap <leader><bar> <C-w>v
  call s:pop_leader()

  " BUFFERS
  call s:push_leader("b")
    " Buffer list
    nnoremap <leader>b :Denite buffer<Cr>
    " Recent file list
    nnoremap <leader>r :Denite file_mru<Cr>
    " Filetype
    nnoremap <leader>t :Denite filetype<Cr>
  call s:pop_leader()

  " SEARCHING
  call s:push_leader("s")
    nnoremap <leader>. :Grepper -tool ag<Cr>
  call s:pop_leader()

  " PROJECT STUFF
  call s:push_leader("p")
    " cd to project root
    nnoremap <leader>c :execute "cd ".projectroot#get()<Cr>
    nnoremap <leader>l :execute "lcd ".projectroot#get()<Cr>
    " Recursive from project
    nnoremap <leader>f :call denite#start([{'name': 'file_rec', 'args': [projectroot#get(".")]}])<Cr>
    " Recursive from current directory
    nnoremap <leader>. :Denite file_rec<Cr>
    " Recursive from directory of current file
    nnoremap <leader>% :call denite#start([{'name': 'file_rec', 'args': [expand("%:p:h")]}])<Cr>
    " Recursive from parent directory of current file
    nnoremap <leader>p :call denite#start([{'name': 'file_rec', 'args': [expand("%:p:h:h")]}])<Cr>
  call s:pop_leader()

  " COLORSCHEME
  call s:push_leader("T")
    nnoremap <leader>c :Denite colorscheme<Cr>
  call s:pop_leader()

  " TEXT MANIPULATIONS
  call s:push_leader("x")
    " ALIGNMENT
    call s:push_leader("a")
      " Align comma'd lists like
      "
      " a, b, c, d
      " foo, bar, blah, baz
      "
      " to this when selected and ran through this command:
      "
      " a,   b,   c,    d
      " foo, bar, blah, baz
      vnoremap <leader>, :Tab /[;,]<CR>gv:s/\v(\s+)([,;])\s?/\2\1/g<CR>gv:s/\v\s+$//<CR>:let @/=""<CR>
    call s:pop_leader()
  call s:pop_leader()

" Helps debug making syntax files, displays the syntax of the
" character underneath the cursor.
" nnoremap <leader>S :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
"             \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
"             \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

  " <leader>xa
  "   ALIGNMENT STUFF

  " VISUAL/HIGHLIGHT manipulations
  call s:push_leader("v")
    nnoremap <leader>c :nohlsearch<CR>
    nnoremap <leader>D :%s/<C-R>///g<CR>
    nnoremap <leader>gD :%g/<C-R>//d<CR>
    nnoremap <leader>g!D :%g!/<C-R>//d<CR>
    vnoremap <leader>D :s/<C-R>///g<CR>
    vnoremap <leader>gD :g/<C-R>//d<CR>
    vnoremap <leader>g!D :g!/<C-R>//d<CR>
    " Highlight spacing errors
    nnoremap <leader><space> /\v(\s+$)\|(<space>\ze<tab>)<CR>
    " Highlight tabs
    nnoremap <leader><Tab> /<Tab><CR>
    " Highlight just pasted text
    nnoremap <leader>v V`]
  call s:pop_leader()

  " FILE STUFF
  call s:push_leader("f")
    nnoremap <leader>l :lcd %:h<Cr>
    nnoremap <leader>c :cd %:h<Cr>
    nnoremap <leader>eD :n $MYVIMRC<Cr>
    execute "nnoremap <leader>ed :n ".s:mainconfig."<Cr>"
    nnoremap <leader>S  :source %<Cr>
    " Open a scratch buffer
    nnoremap <leader>s <C-w>v<C-w>l:Scratch<Cr>
  call s:pop_leader()

  " APPLICATIONY THINGS
  call s:push_leader("a")
    " Open undotree
    nnoremap <leader>u :UndotreeToggle<Cr>
    " Toggle in and out of hex dump mode
    nnoremap <leader>h :Hexmode<Cr>
    nnoremap <leader>n :RecentNotes
  call s:pop_leader()

  " GIT
  call s:push_leader("g")
    nnoremap <leader>s :<c-u>Gstatus<Cr>
    nnoremap <leader>l :<c-u>Glog<Cr>
    nnoremap <leader>d :<c-u>Gdiff<Cr>
    nnoremap <leader>b :<c-u>Gblame<Cr>
    nnoremap <leader>r :<c-u>Gread<Cr>
    nnoremap <leader>w :<c-u>Gwrite<Cr>
    nnoremap <leader>c :<c-u>Gcommit<Cr>
    nnoremap <leader>a :<c-u>Gamend<Cr>
    nnoremap <leader>P :<c-u>Git push-sandbox<Cr>
  call s:pop_leader()

  " VIM
  call s:push_leader("V")
    " executing lines
    nnoremap <leader>e :exe getline(".")<CR>
    vnoremap <leader>e :<C-w>exe join(getline("'<","'>"),'<Bar>')<CR>
    nnoremap <leader>c :botr copen<Cr>
  call s:pop_leader()

call s:pop_leader()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   showmap                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:showmap_auto_whatis_all = 1
if !empty(globpath(&rtp, "autoload/showmap.vim"))
  " nmap <expr> <Space> showmap#helper("<lt>Space>", "n")
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  vim-notes                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Default notes directory
if !exists("g:notes_directories")
  if has('macunix')
    let g:notes_directories = [ '~/Documents/Notes' ]
  else
    let g:notes_directories = [ '~/notes' ]
  endif
endif

let g:notes_suffix = '.txt'
let g:notes_smart_quotes = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                             highlight operator                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! MyYankOperator(type) abort
  let regsave = @@
  let selsave = &selection
  let &selection = 'inclusive'

  if a:type =~? 'v'
    silent execute "normal! gvy"
  elseif a:type == 'line'
    silent execute "normal! '[V']y"
  else
    silent execute "normal! `[v`]y"
  endif

  let &selection = selsave

  let &hlsearch = 1
  let @/ = "\\V".escape(@@, "\\")
  let @@ = regsave
endfunction

" Find qt headers
" if isdirectory("/usr/local/qt")
"     nnoremap <leader>bQ :CtrlP /usr/include/qt<Cr>
" elseif isdirectory("/usr/include/qt4")
"     nnoremap <leader>bQ :CtrlP /usr/include/qt4<Cr>
" endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                    gtags                                    "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nmap <leader>gt :<c-u>Gtags<Cr>
" nmap <leader>gr :<c-u>Gtags -r<Cr>
" nmap <leader>gf :<c-u>Gtags -P<Cr>
" let g:Gtags_OpenQuickfixWindow = 0
" let g:Gtags_VerticalWindow = 0
" let Gtags_Auto_Map = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   scratch                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:scratch_no_mappings = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                abbreviations                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
abbreviate teh the
abbreviate sl std_logic
abbreviate slv std_logic_vector

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   denite                                    "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !empty(globpath(&rtp, "autoload/denite.vim"))
  " denite
  call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')
  call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
  call denite#custom#map('insert', '<C-g>', '<denite:quit>')
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   grepper                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !empty(globpath(&rtp, "autoload/grepper.vim"))
  if has("vim_starting")
    runtime autoload/grepper.vim
    let s:grepper_ag_grepprg = g:grepper.ag.grepprg
  endif
  let g:grepper.tools     = ['ag', 'git', 'grep']
  let g:grepper.next_tool = '<C-n>'
  let g:grepper.switch    = 0
  let g:grepper.jump      = 0
  let g:grepper.ag.grepprg = s:grepper_ag_grepprg.' --smart-case --ignore .git --ignore .svn --skip-vcs-ignores --hidden '
  nmap gs <plug>(GrepperOperator)
  xmap gs <plug>(GrepperOperator)
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                  deoplete                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !empty(globpath(&rtp, "autoload/deoplete.vim"))
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  " Use smartcase.
  let g:deoplete#enable_smart_case = 1

  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function() abort
    return deoplete#close_popup() . "\<CR>"
  endfunction
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 neocomplete                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if !empty(globpath(&rtp, "autoload/neocomplete.vim"))
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ neocomplete#start_manual_complete()
  function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction"}}}
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  " Close popup by <Space>.
  "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

  " AutoComplPop like behavior.
  "let g:neocomplete#enable_auto_select = 1

  " Shell like behavior (not recommended.)
  "set completeopt+=longest
  "let g:neocomplete#enable_auto_select = 1
  "let g:neocomplete#disable_auto_complete = 1
  "inoremap <expr><TAB>  pumvisible() ? "\<Down>" :
  " \ neocomplete#start_manual_complete()

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  "let g:neocomplete#sources#omni#input_patterns.php =
  "\ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
  "let g:neocomplete#sources#omni#input_patterns.c =
  "\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?'
  "let g:neocomplete#sources#omni#input_patterns.cpp =
  "\ '[^.[:digit:] *\t]\%(\.\|->\)\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl =
  \ '[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'

  " For smart TAB completion.
  "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :
  "        \ <SID>check_back_space() ? "\<TAB>" :
  "        \ neocomplete#start_manual_complete()
  "  function! s:check_back_space() "{{{
  "    let col = col('.') - 1
  "    return !col || getline('.')[col - 1]  =~ '\s'
  "  endfunction"}}}
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                projectionist                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:projectionist_heuristics = {
        \ ".projectile": {
        \ },
        \ ".git/config": {
        \ },
        \ ".git": {
        \ }}
"         \ "lib/heroku/&init.rb": {
"         \   "lib/heroku/command/*.rb": {"type": "command"}
"         \ },
"         \ "etc/rbenv.d/|bin/rbenv-*": {
"         \   "bin/rbenv-*": {"type": "command"},
"         \   "etc/rbenv.d/*.bash": {"type": "hook"}
"         \ }}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 random junk                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This makes % work for a lot more than just
" {(<, it also works on html, etc..
runtime macros/matchit.vim

" This makes :Man open manpages in a split with syntax highlighting
runtime ftplugin/man.vim

" Some filesystems that are mounted in /tmp (particularly on OS X), cause
" problems with backup files
augroup customchanges
    au!
    autocmd BufRead /tmp/*
        \ setlocal nobackup |
        \ setlocal nowritebackup

    " Some custom filetypes
    au BufNewFile,BufRead build_log.txt     setf changelog
    au BufNewFile,BufRead *.phys            setf cmphys
    au BufNewFile,BufRead *.vb              set ft=vbnet
    au BufNewFile,BufRead *.il              set ft=ilasm
    au BufNewFile,BufRead *.adoc            set ft=asciidoc

    " Space/tab settings for different filetypes
    au FileType make
        \ Usetabs 8

    au FileType gitcommit
        \ set tw=72

    au FileType ruby
        \ Usespaces 2

    au FileType haml
        \ Usespaces 2

    au FileType vim
        \ Usespaces 2

    au FileType perl
        \ Usespaces 2
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                    mutt                                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
comm! -nargs=0 BeginMailMessage call BeginMailMessage()
function! BeginMailMessage()
    set tw=72
    set wrap
    set expandtab
    set ft=mail
    silent! g/^Message-Id: <.*@.*>/d
    silent! %s/^My-\(Message-Id: <.*@.*>\)$/\1/
    normal 1G
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 hex editor                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Hex editing support (from http://vim.wikia.com/wiki/Improved_hex_editing)
comm! -bar Hexmode call ToggleHex()

" helper function to toggle hex mode
function! ToggleHex()
  " hex mode should be considered a read-only operation
  " save values for modified and read-only for restoration later,
  " and clear the read-only flag for now
  let l:modified=&mod
  let l:oldreadonly=&readonly
  let &readonly=0
  let l:oldmodifiable=&modifiable
  let &modifiable=1
  if !exists("b:editHex") || !b:editHex
    " save old options
    let b:oldft=&ft
    let b:oldbin=&bin
    " set new options
    setlocal binary " make sure it overrides any textwidth, etc.
    let &ft="xxd"
    " set status
    let b:editHex=1
    " switch to hex editor
    %!xxd
  else
    " restore old options
    let &ft=b:oldft
    if !b:oldbin
      setlocal nobinary
    endif
    " set status
    let b:editHex=0
    " return to normal editing
    %!xxd -r
  endif
  " restore values for modified and read only state
  let &mod=l:modified
  let &readonly=l:oldreadonly
  let &modifiable=l:oldmodifiable
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               zsh integration                               "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pull in our zsh special directories
function! PullInZshNamedDirectories()
  if (exists("$HOME"))
    let l:namedirs = $HOME . "/.znameddirs"
    if (filereadable(l:namedirs))
      let l:lines = readfile(l:namedirs)
      for l:a in l:lines
        let l:splitdir = split(l:a, " ")
        if (len(l:splitdir) == 2 && match(l:splitdir[0], '[^a-z0-9_A-Z]') == -1)
          exec "let $" . l:splitdir[0] . " = '" . fnameescape(l:splitdir[1]) ."'"
        endif
      endfor
    endif
  endif
endfunction
call PullInZshNamedDirectories()
