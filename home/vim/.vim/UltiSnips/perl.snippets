global !p
import perl_snippet_helper
endglobal

snippet start
#!/usr/bin/env perl

use feature ':5.14';
use strictures 2;
use warnings 'all';
$^W = 1;
endsnippet

snippet ddp
use DDP ();
DDP::p(${1:var}, use_prototypes => 0);
endsnippet

snippet whereami
use Carp ();
Carp::cluck "${1:Here I am}";
endsnippet

snippet fork
my $pid = fork;
die "fork: $!" unless defined $pid;
endsnippet

snippet json
use JSON ();

my $json = JSON->new->utf8->canonical->allow_nonref->allow_blessed->convert_blessed;
endsnippet

snippet cu
configure_user ${1:user} => {
	shared => { port => ${2:port} },
};
endsnippet

snippet dietrack
local \$SIG{__DIE__} = sub { require Carp; die @_ if ref(\$_[0]); if (\$_[-1] =~ /\\n\$/s) { my \$arg = pop @_; \$arg =~ s/(.*)( at .*? line .*?\\n\$)/\$1/s; push @_, \$arg; } die &Carp::longmess; };
endsnippet

snippet warntrack
local \$SIG{__WARN__} = sub { require Carp; if (\$_[-1] =~ /\\n\$/s) { my \$arg = pop @_; \$arg =~ s/(.*)( at .*? line .*?\\n\$)/\$1/s; push @_, \$arg; } warn &Carp::longmess; };
endsnippet

snippet package
package ${1:`!v expand('%:p:s?.*\(lib\|tests\)/??:r:gs?/?::?')`};

=head1 NAME

$1

=head1 DESCRIPTION

${2:description}

=cut

use strictures 2;

$0

1;
endsnippet

snippet mooserole
package ${1:`!v expand('%:p:s?.*\(lib\|tests\)/??:r:gs?/?::?')`};

=head1 NAME

$1

=head1 DESCRIPTION

${2:description}

=cut

use Moose::Role;
use strictures 2;

=head1 ATTRIBUTES

=cut

$0

=head1 METHODS

=cut

1;
endsnippet

snippet moo
package ${1:`!v expand('%:p:s?.*\(lib\|tests\)/??:r:gs?/?::?')`};

=head1 NAME

$1

=head1 DESCRIPTION

${2:description}

=cut

use Moo;
use strictures 2;
use namespace::clean;

=head1 ATTRIBUTES

=cut

$0

=head1 METHODS

=cut

1;
endsnippet

snippet has
=head2 $1

${4:description}

=cut
has ${1:attribute} => (
	is => '${2:ro|rw}',
	default => sub {
		${3:defaultvalue},
	},
	${0:# other attributes}
);
endsnippet

snippet method
=head2 $1

${2:description}

=cut
sub ${1:method} {
	${0:my ($self) = @_;}
}
endsnippet

pre_expand "perl_snippet_helper.insert_module(snip, 'Data::Dumper')"
snippet dumper
Data::Dumper::Dumper$0
endsnippet

pre_expand "perl_snippet_helper.insert_module(snip, 'Sub::Override')"
snippet override
my $guard = Sub::Override->new('${1:function}' => sub {
	$0
});
endsnippet
